#!/usr/bin/env python3

from pprint import pprint
import boto3
import json
import signal
import sys
import time
import uuid


my_bus = "default"


class Queue:
    def __init__(self, name):
        self.name = name
        response = boto3.client("sqs").create_queue(
            QueueName=name,
        )
        self.url = response["QueueUrl"]
        details = boto3.resource("sqs").get_queue_by_name(QueueName=self.name)
        self.arn = details.attributes["QueueArn"]

    def allow_events_from_rule(self, rule_arn):
        policy = {
            "Version": "2012-10-17",
            "Id": "459e5c57-da9e-44f7-be3c-de64ef137196",
            "Statement": [
                {
                    "Sid": "Sid1579089564624",
                    "Effect": "Allow",
                    "Principal": {"Service": "events.amazonaws.com"},
                    "Action": "sqs:SendMessage",
                    "Resource": self.arn,
                    "Condition": {"ArnEquals": {"aws:SourceArn": rule_arn}},
                }
            ],
        }
        boto3.client("sqs").set_queue_attributes(
            QueueUrl=self.url,
            Attributes={"SqsManagedSseEnabled": "true", "Policy": json.dumps(policy)},
        )

    def get_message(self):
        while True:
            response = boto3.client("sqs").receive_message(
                QueueUrl=self.url,
                AttributeNames=["SentTimestamp"],
                MessageAttributeNames=["All"],
                VisibilityTimeout=0,
                WaitTimeSeconds=0,
            )
            if "Messages" not in response:
                time.sleep(1)
                continue

            for m in response["Messages"]:
                yield m
                boto3.client("sqs").delete_message(
                    QueueUrl=sqs_queue.url, ReceiptHandle=m["ReceiptHandle"]
                )

    def delete(self):
        boto3.client("sqs").delete_queue(
            QueueUrl=self.url,
        )


class EventBridgeRule:
    def __init__(self, bus_name, name):
        self.name = name
        self.bus_name = bus_name
        response = boto3.client("events").put_rule(
            Name=self.name,
            # See: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html
            EventPattern='{"source": ["aws.dynamodb"]}',
            Description="redirect traffic to EDA SQS",
            EventBusName=bus_name,
        )
        self.arn = response["RuleArn"]

    def set_target(self, queue_arn):
        target_id = f"{queue_arn.split(':')[-1]}-target"
        response = boto3.client("events").put_targets(
            Rule=self.name,
            EventBusName=self.bus_name,
            Targets=[
                {
                    "Id": target_id,
                    "Arn": queue_arn,
                    "SqsParameters": {"MessageGroupId": ""},
                }
            ],
        )

    def delete(self):
        response = boto3.client("events").delete_event_bus(Name=self.name)


to_clean_up = []


def graceful_exit(*_):
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    for i in reversed(to_clean_up):
        i.delete()
    sys.exit(0)


signal.signal(signal.SIGINT, graceful_exit)


suffix = uuid.uuid1().hex[0:6]

sqs_queue = Queue(f"EDA-temp-{suffix}")
to_clean_up.append(sqs_queue)
rule = EventBridgeRule(my_bus, f"EDA-temp-{suffix}")
to_clean_up.append(rule)

sqs_queue.allow_events_from_rule(rule.arn)
rule.set_target(sqs_queue.arn)

for message in sqs_queue.get_message():
    pprint(message)

graceful_exit()
